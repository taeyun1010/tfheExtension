Under the setting
n_bands=8;
h_bands=20;
n_arcs=1;
h_radius=12;
h_lato=h_radius+(n_bands*h_bands*2)+16;
if mod(h_lato,2)==0
    h_lato=h_lato-1;
end
n_sectors=n_bands*n_arcs;
matrice=zeros(h_lato);
for ii=1:(h_lato*h_lato)
    matrice(ii)=whichsector(ii);
end
num_disk=2;


to calculate 2-norm distance between vectors having 16 32bit integers, it took 1532.98 seconds using naive implementation of CyperEulcid without utilizing threads.

to calculate 2-norm distance between vectors having 16 10bit integers, it took 266.63 seconds using naive implementation of CyperEulcid without utilizing threads.

to calculate 1-norm distance between vectors having 16 32bit integers, it took 214.601 seconds using naive implementation of CyperOneNorm without utilizing threads.

to calculate 1-norm distance between vectors having 16 10bit integers, it took 65.358 seconds using naive implementation of CyperOneNorm without utilizing threads.

Starting Calculation...
bitsize = 8
elapsed secs to calculate 2-norm = 120.381
result = 0
bitsize = 9
elapsed secs to calculate 2-norm = 236.181
result = 0
bitsize = 10
elapsed secs to calculate 2-norm = 266.294
result = 0
bitsize = 11
elapsed secs to calculate 2-norm = 296.244
result = 0
bitsize = 12
elapsed secs to calculate 2-norm = 325.055
result = 0
bitsize = 13
elapsed secs to calculate 2-norm = 350.725
result = 0
bitsize = 14
elapsed secs to calculate 2-norm = 376.229
result = 0
bitsize = 15
elapsed secs to calculate 2-norm = 397.439
result = 0
bitsize = 16
elapsed secs to calculate 2-norm = 414.902
result = 0
bitsize = 17
elapsed secs to calculate 2-norm = 804.734
result = 0
bitsize = 18
elapsed secs to calculate 2-norm = 872.052
result = 0
bitsize = 19
elapsed secs to calculate 2-norm = 924.886
result = 0
bitsize = 20
elapsed secs to calculate 2-norm = 986.158
result = 0
bitsize = 21
elapsed secs to calculate 2-norm = 1044.18
result = 0
bitsize = 22
elapsed secs to calculate 2-norm = 1098.22
result = 0
bitsize = 23
elapsed secs to calculate 2-norm = 1149.7
result = 0
bitsize = 24
elapsed secs to calculate 2-norm = 1202.66
result = 0
bitsize = 25
elapsed secs to calculate 2-norm = 1252.82
result = 0
bitsize = 26
elapsed secs to calculate 2-norm = 1301.67
result = 3
bitsize = 27
elapsed secs to calculate 2-norm = 1347.84
result = 3
bitsize = 28
^C

tarting Calculation...
bitsize = 28
elapsed secs to calculate 2-norm = 1383.54
result = 5
bitsize = 29
elapsed secs to calculate 2-norm = 1421.24
result = 13
bitsize = 30
elapsed secs to calculate 2-norm = 1458.58
result = 44
bitsize = 31
elapsed secs to calculate 2-norm = 1490.56
result = 199

Starting Calculation...
bitsize = 8
elapsed secs to calculate one-norm = 52.6097
result = 0
bitsize = 9
elapsed secs to calculate one-norm = 59.1668
result = 0
bitsize = 10
elapsed secs to calculate one-norm = 65.9612
result = 0
bitsize = 11
elapsed secs to calculate one-norm = 72.7506
result = 0
bitsize = 12
elapsed secs to calculate one-norm = 79.5609
result = 0
bitsize = 13
elapsed secs to calculate one-norm = 87.1863
result = 0
bitsize = 14
elapsed secs to calculate one-norm = 94.4675
result = 0
bitsize = 15
elapsed secs to calculate one-norm = 100.042
result = 0
bitsize = 16
elapsed secs to calculate one-norm = 106.788
result = 0
bitsize = 17
elapsed secs to calculate one-norm = 113.603
result = 0
bitsize = 18
elapsed secs to calculate one-norm = 120.478
result = 0
bitsize = 19
elapsed secs to calculate one-norm = 127.257
result = 0
bitsize = 20
elapsed secs to calculate one-norm = 134.047
result = 0
bitsize = 21
elapsed secs to calculate one-norm = 140.882
result = 0
bitsize = 22
elapsed secs to calculate one-norm = 147.671
result = 0
bitsize = 23
elapsed secs to calculate one-norm = 154.432
result = 0
bitsize = 24
elapsed secs to calculate one-norm = 161.23
result = 0
bitsize = 25
elapsed secs to calculate one-norm = 167.975
result = 0
bitsize = 26
elapsed secs to calculate one-norm = 174.799
result = 3
bitsize = 27
elapsed secs to calculate one-norm = 181.623
result = 3


Starting Calculation...
bitsize = 28
elapsed secs to calculate one-norm = 189.266
result = 5
bitsize = 29
elapsed secs to calculate one-norm = 195.025
result = 13
bitsize = 30
elapsed secs to calculate one-norm = 202.622
result = 22
bitsize = 31
elapsed secs to calculate one-norm = 207.965
result = 47


Starting Calculation...
bitsize = 8
elapsed secs to calculate a product = 5.4279
result = 0
bitsize = 9
elapsed secs to calculate a product = 12.2826
result = 0
bitsize = 10
elapsed secs to calculate a product = 14.0355
result = 0
bitsize = 11
elapsed secs to calculate a product = 15.6362
result = 0
bitsize = 12
elapsed secs to calculate a product = 17.1188
result = 0
bitsize = 13
elapsed secs to calculate a product = 18.5174
result = 0
bitsize = 14
elapsed secs to calculate a product = 19.799
result = 0
bitsize = 15
elapsed secs to calculate a product = 20.8479
result = 0
bitsize = 16
elapsed secs to calculate a product = 21.7791
result = 0
bitsize = 17
elapsed secs to calculate a product = 45.6787
result = 0
bitsize = 18
elapsed secs to calculate a product = 49.3166
result = 0
bitsize = 19
elapsed secs to calculate a product = 52.8079
result = 0
bitsize = 20
elapsed secs to calculate a product = 56.1797
result = 0
bitsize = 21
elapsed secs to calculate a product = 59.4574
result = 0
bitsize = 22
elapsed secs to calculate a product = 62.635
result = 0
bitsize = 23
elapsed secs to calculate a product = 65.661
result = 0
bitsize = 24
elapsed secs to calculate a product = 68.689
result = 0
bitsize = 25
elapsed secs to calculate a product = 71.5539
result = 0
bitsize = 26
elapsed secs to calculate a product = 74.3604
result = 0
bitsize = 27
elapsed secs to calculate a product = 76.9141
result = 1
bitsize = 28
elapsed secs to calculate a product = 79.2571
result = 9
bitsize = 29
elapsed secs to calculate a product = 81.5009
result = 42
bitsize = 30
elapsed secs to calculate a product = 87.1259
result = 182
bitsize = 31
elapsed secs to calculate a product = 85.3404
result = 754
bitsize = 32
elapsed secs to calculate a product = 86.8987
result = 3127
bitsize = 33
Segmentation fault (core dumped)


encrypting and inserting a 16 bit integer into ciphertext databases using 16 bits takes about 0.27 seconds
retrieving and decrypting a ciphertext into 16 bit integer using 16bits 2.045 seconds

to compare two encrypted 32 bit ciphertext, it took 3.063 secondsd on average.

dropping 16 ciphertexts table (when 16 bits are used to represent an integer) took 1.09 sec.

creating 16 ciphertexts table (when 16 bits are used to represent an integer) took 1.69 sec.

encrypting and inserting a fingerprint vector having 16 integers along with fp_number to the encrypted database took 27.07 sec. 


calculating 2-norm using doubles for the whole dataset between the same person using numfeatures=2
n_bands=1;
h_bands=20;
n_arcs=1;
h_radius=12;
h_lato=h_radius+(n_bands*h_bands*2)+16;
if mod(h_lato,2)==0
    h_lato=h_lato-1;
end
n_sectors=n_bands*n_arcs;
matrice=zeros(h_lato);
for ii=1:(h_lato*h_lato)
    matrice(ii)=whichsector(ii);
end
num_disk=2;

required 121.155236 seconds.

calculating 2-norm using doubles for the whole dataset between the same person using numfeatures=8
n_bands=4;
h_bands=20;
n_arcs=1;
h_radius=12;
h_lato=h_radius+(n_bands*h_bands*2)+16;
if mod(h_lato,2)==0
    h_lato=h_lato-1;
end
n_sectors=n_bands*n_arcs;
matrice=zeros(h_lato);
for ii=1:(h_lato*h_lato)
    matrice(ii)=whichsector(ii);
end
num_disk=2;

required 152.060636 seconds.

calculating 2-norm using doubles for the whole dataset between the same person using numfeatures=16
% n_bands=8;
% h_bands=20;
% n_arcs=1;
% h_radius=12;
% h_lato=h_radius+(n_bands*h_bands*2)+16;
% if mod(h_lato,2)==0
%     h_lato=h_lato-1;
% end
% n_sectors=n_bands*n_arcs;
% matrice=zeros(h_lato);
% for ii=1:(h_lato*h_lato)
%     matrice(ii)=whichsector(ii);
% end
% num_disk=2;

required 217.280125 seconds.

calculating 2-norm using doubles for the whole dataset between the same person using numfeatures=384
% n_bands=4;
% h_bands=20;
% n_arcs=12;
% h_radius=12;
% h_lato=h_radius+(n_bands*h_bands*2)+16;
% if mod(h_lato,2)==0
%     h_lato=h_lato-1;
% end
% n_sectors=n_bands*n_arcs;
% matrice=zeros(h_lato);
% for ii=1:(h_lato*h_lato)
%     matrice(ii)=whichsector(ii);
% end
% num_disk=8;

required 539.440978 seconds.

calculating 2-norm using doubles for the whole dataset between the same person using numfeatures=640
% n_bands=5;
% h_bands=20;
% n_arcs=16;
% h_radius=12;
% h_lato=h_radius+(n_bands*h_bands*2)+16;
% if mod(h_lato,2)==0
%     h_lato=h_lato-1;
% end
% n_sectors=n_bands*n_arcs;
% matrice=zeros(h_lato);
% for ii=1:(h_lato*h_lato)
%     matrice(ii)=whichsector(ii);
% end
% num_disk=8;

required 662.145636 seconds.

calculating 2-norm using doubles for the whole dataset between the same person using numfeatures=1280
% n_bands=5;
% h_bands=20;
% n_arcs=16;
% h_radius=12;
% h_lato=h_radius+(n_bands*h_bands*2)+16;
% if mod(h_lato,2)==0
%     h_lato=h_lato-1;
% end
% n_sectors=n_bands*n_arcs;
% matrice=zeros(h_lato);
% for ii=1:(h_lato*h_lato)
%     matrice(ii)=whichsector(ii);
% end
% num_disk=16;

required 1235.551373 seconds.  (these 2-norm calculation times were measure in Matlab)

calculating 2-norm distances using 16 number of features using doubles on encrypted domain and using 13 bits to represent integerpart and 13 bits to represent fractionpart took 4378.47 seconds.

insert fingerprintdoubles;
Query OK, 0 rows affected (1 day 5 hours 7 min 16.61 sec) 
using 16 number of integer bits and 16 fraction bits, and 16 number of features
+--------------------+----------------------------------------------+------------+
| Database           | Table                                        | Size in MB |
+--------------------+----------------------------------------------+------------+
| encrypteddoublefps | ciphertext_integer_bit6                      |      71.88 |
| encrypteddoublefps | ciphertext_fraction_bit0                     |      71.88 |
| encrypteddoublefps | ciphertext_fraction_bit9                     |      71.88 |
| encrypteddoublefps | ciphertext_integer_bit5                      |      71.88 |
| encrypteddoublefps | ciphertext_fraction_bit8                     |      71.88 |
| encrypteddoublefps | ciphertext_integer_bit4                      |      71.88 |
| encrypteddoublefps | ciphertext_fraction_bit7                     |      71.88 |
| encrypteddoublefps | ciphertext_integer_bit3                      |      71.88 |
| tfhe               | ciphertext_bit9                              |      71.88 |
| encrypteddoublefps | ciphertext_fraction_bit6                     |      71.88 |
| encrypteddoublefps | ciphertext_integer_bit2                      |      71.88 |
| encrypteddoublefps | ciphertext_fraction_bit5                     |      71.88 |
| encrypteddoublefps | ciphertext_integer_bit15                     |      71.88 |
| tfhe               | ciphertext_bit8                              |      71.88 |
| encrypteddoublefps | ciphertext_fraction_bit4                     |      71.88 |
| encrypteddoublefps | ciphertext_integer_bit14                     |      71.88 |
| tfhe               | ciphertext_bit7                              |      71.88 |
| encrypteddoublefps | ciphertext_integer_bit13                     |      71.88 |
| tfhe               | ciphertext_bit6                              |      71.88 |
| encrypteddoublefps | ciphertext_fraction_bit3                     |      71.88 |
| tfhe               | ciphertext_bit13                             |      71.88 |
| tfhe               | ciphertext_bit5                              |      71.88 |
| encrypteddoublefps | ciphertext_fraction_bit2                     |      71.88 |
| encrypteddoublefps | ciphertext_integer_bit12                     |      71.88 |
| tfhe               | ciphertext_bit4                              |      71.88 |
| encrypteddoublefps | ciphertext_fraction_bit15                    |      71.88 |
| encrypteddoublefps | ciphertext_integer_bit11                     |      71.88 |
| tfhe               | ciphertext_bit12                             |      71.88 |
| tfhe               | ciphertext_bit3                              |      71.88 |
| encrypteddoublefps | ciphertext_fraction_bit14                    |      71.88 |
| encrypteddoublefps | ciphertext_integer_bit10                     |      71.88 |
| tfhe               | ciphertext_bit11                             |      71.88 |
| tfhe               | ciphertext_bit2                              |      71.88 |
| encrypteddoublefps | ciphertext_fraction_bit13                    |      71.88 |
| encrypteddoublefps | ciphertext_integer_bit1                      |      71.88 |
| tfhe               | ciphertext_bit10                             |      71.88 |
| encrypteddoublefps | ciphertext_fraction_bit12                    |      71.88 |
| encrypteddoublefps | ciphertext_integer_bit0                      |      71.88 |
| tfhe               | ciphertext_bit1                              |      71.88 |
| tfhe               | ciphertext_bit15                             |      71.88 |
| encrypteddoublefps | ciphertext_fraction_bit11                    |      71.88 |
| tfhe               | ciphertext_bit0                              |      71.88 |
| encrypteddoublefps | ciphertext_integer_bit9                      |      71.88 |
| tfhe               | ciphertext_bit14                             |      71.88 |
| encrypteddoublefps | ciphertext_integer_bit8                      |      71.88 |
| encrypteddoublefps | ciphertext_fraction_bit10                    |      71.88 |
| encrypteddoublefps | ciphertext_integer_bit7                      |      71.88 |
| encrypteddoublefps | ciphertext_fraction_bit1                     |      71.88 |


taeyun@taeyun-desktop:~/Desktop/tensor1_new$ ./tfhedistance 3.1 4.1 11 16 13 3
time taken to do calculate Euclidean distance = 1745.96
start of integerpart
temp[0] = 1
temp[1] = 1
temp[2] = 0
temp[3] = 1
temp[4] = 1
temp[5] = 0
temp[6] = 1
temp[7] = 1
temp[8] = 0
temp[9] = 1
temp[10] = 0
temp[11] = 1
temp[12] = 1
end of integerpart
start of fractionpart
temp[0] = 0
temp[1] = 1
temp[2] = 1
temp[3] = 1
temp[4] = 1
temp[5] = 0
temp[6] = 1
temp[7] = 1
temp[8] = 0
temp[9] = 1
temp[10] = 1
temp[11] = 0
temp[12] = 1
end of fractionpart
decryptedintpart = 6875
temp[2] = 1
temp[1] = 1
temp[0] = 0
decryptedfracpart = 0.75
answer = 6875.75
taeyun@taeyun-desktop:~/Desktop/tensor1_new$ ./tfhedistance 3.1 4.1 11 16 13 2
Segmentation fault (core dumped)
taeyun@taeyun-desktop:~/Desktop/tensor1_new$ ./tfhedistance 3.1 4.1 11 15 13 2
time taken to do calculate Euclidean distance = 1549.19
start of integerpart
temp[0] = 1
temp[1] = 1
temp[2] = 0
temp[3] = 0
temp[4] = 0
temp[5] = 1
temp[6] = 1
temp[7] = 1
temp[8] = 0
temp[9] = 1
temp[10] = 0
temp[11] = 1
temp[12] = 1
end of integerpart
start of fractionpart
temp[0] = 1
temp[1] = 0
temp[2] = 1
temp[3] = 1
temp[4] = 0
temp[5] = 0
temp[6] = 0
temp[7] = 1
temp[8] = 1
temp[9] = 1
temp[10] = 0
temp[11] = 1
temp[12] = 0
end of fractionpart
decryptedintpart = 6883
temp[1] = 0
temp[0] = 1
decryptedfracpart = 0.25
answer = 6883.25

Time for 10 runs of Euclidean distance between vectors containing 16 16 bit integers:

 Performance counter stats for './proposed 3 9 5 32 16 16' (10 runs):

     416071.549896      task-clock (msec)         #    2.510 CPUs utilized            ( +-  0.10% )
            70,454      context-switches          #    0.169 K/sec                    ( +-  7.20% )
             3,514      cpu-migrations            #    0.008 K/sec                    ( +-  1.82% )
           168,071      page-faults               #    0.404 K/sec                    ( +-  0.02% )
 1,507,952,839,481      cycles                    #    3.624 GHz                      ( +-  0.07% )
 3,960,837,630,876      instructions              #    2.63  insn per cycle           ( +-  0.00% )
   336,414,213,369      branches                  #  808.549 M/sec                    ( +-  0.00% )
       841,932,575      branch-misses             #    0.25% of all branches          ( +-  0.19% )

     165.787612588 seconds time elapsed                                          ( +-  0.34% )


Time for 10 runs of Euclidean distance between vectors containing 16 10 bit integers:
 Performance counter stats for './proposed 3 9 5 32 16 16' (10 runs):

     267151.110440      task-clock (msec)         #    2.525 CPUs utilized            ( +-  0.08% )
            41,114      context-switches          #    0.154 K/sec                    ( +-  3.41% )
             2,561      cpu-migrations            #    0.010 K/sec                    ( +-  1.51% )
           145,898      page-faults               #    0.546 K/sec                    ( +-  0.01% )
   968,416,591,393      cycles                    #    3.625 GHz                      ( +-  0.07% )
 2,540,625,570,214      instructions              #    2.62  insn per cycle           ( +-  0.00% )
   215,955,419,388      branches                  #  808.364 M/sec                    ( +-  0.00% )
       534,773,518      branch-misses             #    0.25% of all branches          ( +-  0.22% )

     105.796225092 seconds time elapsed                                          ( +-  0.15% )



Time for 10 runs of one-norm distance between vectors containing 16 10 bit integers:

 Performance counter stats for './proposed 3 9 7 32 16 16' (10 runs):

      66445.174626      task-clock (msec)         #    1.339 CPUs utilized            ( +-  0.24% )
             2,645      context-switches          #    0.040 K/sec                    ( +-  6.37% )
               110      cpu-migrations            #    0.002 K/sec                    ( +-  9.91% )
           104,086      page-faults               #    0.002 M/sec                    ( +-  0.00% )
   244,615,930,435      cycles                    #    3.681 GHz                      ( +-  0.06% )
   643,053,884,694      instructions              #    2.63  insn per cycle           ( +-  0.00% )
    54,583,937,779      branches                  #  821.488 M/sec                    ( +-  0.00% )
       132,691,668      branch-misses             #    0.24% of all branches          ( +-  0.44% )

      49.637495866 seconds time elapsed                                          ( +-  0.25% )

